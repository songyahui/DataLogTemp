
.type DisjList = Pos { name: symbol} | Neg { name: symbol} | Disjs {left:DisjList, right:DisjList}

.type CNFList = Singleton {ele: DisjList} | Conjs {left:CNFList, right:CNFList}

.decl CNF(literal:CNFList, loc:number)


//CNF($Singleton($Pos("B")), 2). // "B"

CNF($Conjs($Singleton($Pos("A")), $Singleton($Pos("B"))), 2). // "A/\B"
//CNF($Singleton($Disjs($Neg("A"), $Neg("B"))), 4). // "!A \/ !B" 

// "!(A/\B)" = "!A \/ !B" 
Neg($Conjs($Singleton($Pos("A")), $Singleton($Pos("B"))), $Singleton($Disjs($Neg("A"), $Neg("B")))) :- true. 

// not "B" = "!B" 
Neg($Singleton($Pos("B")), $Singleton($Neg("B"))) :- true. 


// $Singleton($Disjs($Neg("A"), $Neg("B")))-
CNF(cnf1, 4) :-   CNF(cnf, 2), Neg(cnf, cnf1).

// facts: 
overflow (1, 2).
overflow (0, 4).

/*@
1. if A && B // ->> B 
2.    {overflow = 1}
3. else 
4.    {overflow = 0}  
@*/

.decl overflow(v:number, loc:number)
.decl violation(loc:number)
.decl SAT(c1:CNFList, c2:CNFList)
.decl Neg(c1:CNFList, c2:CNFList)


// SAT("!A \/ !B" /\ "B") = true 
SAT($Singleton($Disjs($Neg("A"), $Neg("B"))), $Singleton($Pos("B"))):- true.

//bug: violation(4) is true
violation(loc) :- overflow(0, loc), CNF(cnf, loc), SAT(cnf, $Singleton($Pos("B"))).

.output violation(IO=stdout)