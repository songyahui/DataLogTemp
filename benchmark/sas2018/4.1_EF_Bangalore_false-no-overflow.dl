/*
 * Date: 06/07/2015  "EF{x < 0}"
 * Created by: Ton Chanh Le (chanhle@comp.nus.edu.sg)
 * Adapted from the example Bangalore_true-termination.c
 */
/**
int _nondet_int() {}

int main()
{
    int x;
    int y;
    x = _nondet_int();
    y = _nondet_int();
	if (y < 1) {
	    while (x >= 0) {
	    	x = x - y;
    	} // y > 0 ~~~> x < 0 
	}
	return 0;
}
*/

entry(9). end(21).
state(9). state(10). state(11). state(12). state(13). state(14). state(15).
state(16). state(17). state(18). state(19). state(20). state(21).

flow (9, 10). flow (10, 11). flow (11, 12). flow (12, 13). flow (13, 14). flow (14, 15). 
flow (15, 16) :- valuation("y", 15, y_v), y_v<1.
flow (16, 18) :- valuation("x", 16, x_v), x_v<0. // escape the loop 
flow (18, 19) :- valuation("x", 16, x_v), x_v<0. // escape the loop 
flow (19, 20) :- valuation("x", 16, x_v), x_v<0. // escape the loop 

flow (16, 17) :- valuation("x", 16, x_v), x_v>=0. // escape the loop 
flow (17, 16) :- valuation("y", 16, y_v), y_v<=0. // escape the loop 

flow (15, 20) :- valuation("y", 15, y_v), y_v>=1.
flow (20, 21).


/** *********************************************************************
General NOTE: 
This test case checks the (EF{x < 0}) property of a program.
i) does NOT satisfy the property if x>=0 and 0<=y<1 at line 16. 
ii) does NOT satisfy the property if x>=0 and y>=1 at line 16. 
iii) otherwise the property hold
So the valuation of x and y matters. 
********************************************************************* */
/** *********************************************************************
Repair NOTE: 
We want the EF{x < 0} property to hold at line 9. To repair: 
1) add assign("x", 13, -2) directly
2) add assign("y", 14, 2) , assign("x", 13, -2).
********************************************************************* */

assign("x", 13, 1). //assign("x", 13, -2).
assign("y", 14, 2). // assign("x", 13, -2).

.decl entry(x:number)
.decl end(x:number)
.decl valuation(x:symbol,loc:number,n:number)
.decl assign(x:symbol,loc:number,n:number)
.decl state(x:number)
.decl flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl xIsSmallerThan_0(loc:number)
.decl EF_xIsSmallerThan_0(loc:number)
.decl EF_xIsSmallerThan_0Final(loc:number)
transFlow(x,y) :- flow(x,y).
transFlow(x,z) :- flow(x,y), transFlow(y,z).
valuation(x,loc,n) :- assign(x,loc,n).
valuation(x,loc,n) :- valuation(x,locTemp,n), flow(locTemp,loc), !assign(x,loc,_).
xIsSmallerThan_0(loc) :- state(loc), valuation("x",loc,x_v), (x_v < 0).
EF_xIsSmallerThan_0(loc) :- flow(loc,tempOne), EF_xIsSmallerThan_0(tempOne).
EF_xIsSmallerThan_0(loc) :- xIsSmallerThan_0(loc).
EF_xIsSmallerThan_0Final(loc) :- entry(loc), EF_xIsSmallerThan_0(loc).
.output EF_xIsSmallerThan_0Final(IO=stdout)
