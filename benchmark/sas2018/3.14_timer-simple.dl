// -ctl "NOT{AG{OR{timer_1 != 0}{AF{output_1 == 1}}}}" 
// -ctl "NOT{AG{{timer_1 = 0 -> AF{output_1 == 1}}}}" 
//#Unsafe
//@ ltl invariant someinv: !([](AP(timer_1 == 0) ==> <>(AP(output_1 == 1))));
/** 
int timer_1;
int output_1;
	
int main()
{
	timer_1 = 0;
	output_1 = 0;

    while(1){
        timer_1++;
        if(timer_1>=10){
            timer_1=0;
        }
		if(timer_1==0){
			output_1=1;
		} else{
			output_1=0;
		}
    }
}
*/

entry(9). end(25).
state(9). state(10). state(11). state(12). state(13). state(14). state(15).
state(16). state(17). state(18). state(19). state(20). state(21).
state(22). state(23). state(24). state(25). 


flow (9, 10). flow (10, 11). flow (11, 12). flow (12, 13). flow (13, 14). flow (14, 15). flow(15, 16). 
flow (16, 17) :- valuation("timer_1", 15, t_v), t_v>=10. 
flow (17, 19). 
flow (19, 20) :- valuation("timer_1", 15, t_v), t_v=0. 
flow (19, 22) :- valuation("timer_1", 15, t_v), t_v!=0. 

flow (20, 24). 
flow (22, 24). flow (24, 14). 


assign("timer_1", 11, 0). assign("timer_1", 17, 0). 
assign("output_1", 12, 0). 
assign("output_1", 20, 1). 
assign("output_1", 22, 0). 



.decl entry(x:number)
.decl end(x:number)
.decl valuation(x:symbol,loc:number,n:number)
.decl assign(x:symbol,loc:number,n:number)
.decl state(x:number)
.decl flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl output_1IsValue_1(loc:number)
.decl timer_1IsValue_0(loc:number)
.decl timer_1IsValue_0_IMPLY_output_1IsValue_1(loc:number)
.decl NOT_timer_1IsValue_0_IMPLY_output_1IsValue_1(loc:number)
.decl EF_NOT_timer_1IsValue_0_IMPLY_output_1IsValue_1(loc:number)
.decl AG_timer_1IsValue_0_IMPLY_output_1IsValue_1(loc:number)
.decl AG_timer_1IsValue_0_IMPLY_output_1IsValue_1Final(loc:number)
transFlow(x,y) :- flow(x,y).
transFlow(x,z) :- flow(x,y), transFlow(y,z).
valuation(x,loc,n) :- assign(x,loc,n).
valuation(x,loc,n) :- valuation(x,locTemp,n), flow(locTemp,loc), !assign(x,loc,_).
output_1IsValue_1(loc) :- state(loc), valuation("output_1",loc,output_1_v), (output_1_v = 1).
timer_1IsValue_0(loc) :- state(loc), valuation("timer_1",loc,timer_1_v), (timer_1_v = 0).
timer_1IsValue_0_IMPLY_output_1IsValue_1(loc) :- state(loc), !timer_1IsValue_0(loc).
timer_1IsValue_0_IMPLY_output_1IsValue_1(loc) :- output_1IsValue_1(loc).
NOT_timer_1IsValue_0_IMPLY_output_1IsValue_1(loc) :- state(loc), !timer_1IsValue_0_IMPLY_output_1IsValue_1(loc).
EF_NOT_timer_1IsValue_0_IMPLY_output_1IsValue_1(loc) :- flow(loc,tempOne), EF_NOT_timer_1IsValue_0_IMPLY_output_1IsValue_1(tempOne).
EF_NOT_timer_1IsValue_0_IMPLY_output_1IsValue_1(loc) :- NOT_timer_1IsValue_0_IMPLY_output_1IsValue_1(loc).
AG_timer_1IsValue_0_IMPLY_output_1IsValue_1(loc) :- state(loc), !EF_NOT_timer_1IsValue_0_IMPLY_output_1IsValue_1(loc).
AG_timer_1IsValue_0_IMPLY_output_1IsValue_1Final(loc) :- entry(loc), AG_timer_1IsValue_0_IMPLY_output_1IsValue_1(loc).
.output AG_timer_1IsValue_0_IMPLY_output_1IsValue_1Final(IO=stdout)
