/** // FuncTion arguments:
// -ctl "AF{y==1}"
// -precondition true 

void main() {
    int y;
    int x;
    x = 2; 
    if (x>=2 && x%2==0 ){ 
        y = 1; 
    }
    else {y =0;}
}
*/


entry(5). end(13).
state(5). state(6). state(7). state(8). state(9). state(10). state(11). state(12). state(13). 
flow (5, 6). flow (6, 7). flow (7, 8).
flow (8, 9). 

flow (9, 10):-  valuation("x", 9, x_v), x_v>=2, x_v%2 =0. 
flow (10, 13):-  valuation("x", 9, x_v), x_v>=2, x_v%2 =0. 

flow (9, 12):- valuation("x", 9, x_v), x_v<2. 
flow (9, 12):- valuation("x", 9, x_v), x_v%2 =1. 
flow (12, 13):- valuation("x", 9, x_v), x_v<2. 
flow (12, 13):- valuation("x", 9, x_v), x_v%2 =1. 


/** *********************************************************************
General NOTE: 
This test case checks the (AF{y==1}) property of a program.
i) the program satisfies if x=2 at line 8
ii) does NOT satisfy     if x is odd or x <2 at line 8. 
So the valuation of x matters. 
********************************************************************* */
/** *********************************************************************
Repair NOTE: 
We want the (AF{y==1}) property to hold. To repair: 
1) change assign("x", 8, 1). to assign("x", 8, 2).
2) change assign("y", 12, 0).to assign("y", 12, 1).
********************************************************************* */

assign("y", 10, 1).
assign("y", 12, 0).
assign("x", 8, 1).


.decl entry(x:number)
.decl end(x:number)
.decl valuation(x:symbol,loc:number,n:number)
.decl assign(x:symbol,loc:number,n:number)
.decl state(x:number)
.decl flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl yIsValue_1(loc:number)
.decl AF_yIsValue_1_T(interm_state:number,loc:number)
.decl AF_yIsValue_1_S(loc:number)
.decl AF_yIsValue_1(loc:number)
.decl AF_yIsValue_1Final(loc:number)
transFlow(x,y) :- flow(x,y).
transFlow(x,z) :- flow(x,y), transFlow(y,z).
valuation(x,loc,n) :- assign(x,loc,n).
valuation(x,loc,n) :- valuation(x,locTemp,n), flow(locTemp,loc), !assign(x,loc,_).
yIsValue_1(loc) :- state(loc), valuation("y",loc,y_v), (y_v = 1).
AF_yIsValue_1_T(interm_state,loc) :- AF_yIsValue_1_T(tempOne,loc), !yIsValue_1(tempOne), flow(tempOne,interm_state).
AF_yIsValue_1_T(interm_state,loc) :- !yIsValue_1(loc), flow(loc,interm_state).
AF_yIsValue_1_S(loc) :- !yIsValue_1(loc), flow(loc,tempOne), AF_yIsValue_1_S(tempOne).
AF_yIsValue_1_S(loc) :- !yIsValue_1(loc), end(loc).
AF_yIsValue_1_S(loc) :- AF_yIsValue_1_T(loc,loc).
AF_yIsValue_1(loc) :- state(loc), !AF_yIsValue_1_S(loc).
AF_yIsValue_1Final(loc) :- entry(loc), AF_yIsValue_1(loc).
.output AF_yIsValue_1Final(IO=stdout)